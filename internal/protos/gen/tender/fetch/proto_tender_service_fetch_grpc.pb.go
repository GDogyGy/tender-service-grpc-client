// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/protos/proto/tender/proto_tender_service_fetch.proto

package fetch

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenderServiceFetch_FetchList_FullMethodName       = "/fetch.TenderServiceFetch/FetchList"
	TenderServiceFetch_FetchListByUser_FullMethodName = "/fetch.TenderServiceFetch/FetchListByUser"
	TenderServiceFetch_FetchStatus_FullMethodName     = "/fetch.TenderServiceFetch/FetchStatus"
)

// TenderServiceFetchClient is the client API for TenderServiceFetch service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenderServiceFetchClient interface {
	FetchList(ctx context.Context, in *RequestFetchListV1, opts ...grpc.CallOption) (*ResponseTendersV1, error)
	FetchListByUser(ctx context.Context, in *RequestFetchListByUserV1, opts ...grpc.CallOption) (*ResponseTendersV1, error)
	FetchStatus(ctx context.Context, in *RequestFetchStatusV1, opts ...grpc.CallOption) (*ResponseFetchStatusV1, error)
}

type tenderServiceFetchClient struct {
	cc grpc.ClientConnInterface
}

func NewTenderServiceFetchClient(cc grpc.ClientConnInterface) TenderServiceFetchClient {
	return &tenderServiceFetchClient{cc}
}

func (c *tenderServiceFetchClient) FetchList(ctx context.Context, in *RequestFetchListV1, opts ...grpc.CallOption) (*ResponseTendersV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseTendersV1)
	err := c.cc.Invoke(ctx, TenderServiceFetch_FetchList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenderServiceFetchClient) FetchListByUser(ctx context.Context, in *RequestFetchListByUserV1, opts ...grpc.CallOption) (*ResponseTendersV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseTendersV1)
	err := c.cc.Invoke(ctx, TenderServiceFetch_FetchListByUser_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenderServiceFetchClient) FetchStatus(ctx context.Context, in *RequestFetchStatusV1, opts ...grpc.CallOption) (*ResponseFetchStatusV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseFetchStatusV1)
	err := c.cc.Invoke(ctx, TenderServiceFetch_FetchStatus_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenderServiceFetchServer is the server API for TenderServiceFetch service.
// All implementations must embed UnimplementedTenderServiceFetchServer
// for forward compatibility.
type TenderServiceFetchServer interface {
	FetchList(context.Context, *RequestFetchListV1) (*ResponseTendersV1, error)
	FetchListByUser(context.Context, *RequestFetchListByUserV1) (*ResponseTendersV1, error)
	FetchStatus(context.Context, *RequestFetchStatusV1) (*ResponseFetchStatusV1, error)
	mustEmbedUnimplementedTenderServiceFetchServer()
}

// UnimplementedTenderServiceFetchServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenderServiceFetchServer struct{}

func (UnimplementedTenderServiceFetchServer) FetchList(context.Context, *RequestFetchListV1) (*ResponseTendersV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchList not implemented")
}
func (UnimplementedTenderServiceFetchServer) FetchListByUser(context.Context, *RequestFetchListByUserV1) (*ResponseTendersV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchListByUser not implemented")
}
func (UnimplementedTenderServiceFetchServer) FetchStatus(context.Context, *RequestFetchStatusV1) (*ResponseFetchStatusV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchStatus not implemented")
}
func (UnimplementedTenderServiceFetchServer) mustEmbedUnimplementedTenderServiceFetchServer() {}
func (UnimplementedTenderServiceFetchServer) testEmbeddedByValue()                            {}

// UnsafeTenderServiceFetchServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenderServiceFetchServer will
// result in compilation errors.
type UnsafeTenderServiceFetchServer interface {
	mustEmbedUnimplementedTenderServiceFetchServer()
}

func RegisterTenderServiceFetchServer(s grpc.ServiceRegistrar, srv TenderServiceFetchServer) {
	// If the following call pancis, it indicates UnimplementedTenderServiceFetchServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenderServiceFetch_ServiceDesc, srv)
}

func _TenderServiceFetch_FetchList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetchListV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceFetchServer).FetchList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenderServiceFetch_FetchList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceFetchServer).FetchList(ctx, req.(*RequestFetchListV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenderServiceFetch_FetchListByUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetchListByUserV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceFetchServer).FetchListByUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenderServiceFetch_FetchListByUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceFetchServer).FetchListByUser(ctx, req.(*RequestFetchListByUserV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenderServiceFetch_FetchStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestFetchStatusV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceFetchServer).FetchStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenderServiceFetch_FetchStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceFetchServer).FetchStatus(ctx, req.(*RequestFetchStatusV1))
	}
	return interceptor(ctx, in, info, handler)
}

// TenderServiceFetch_ServiceDesc is the grpc.ServiceDesc for TenderServiceFetch service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenderServiceFetch_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "fetch.TenderServiceFetch",
	HandlerType: (*TenderServiceFetchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchList",
			Handler:    _TenderServiceFetch_FetchList_Handler,
		},
		{
			MethodName: "FetchListByUser",
			Handler:    _TenderServiceFetch_FetchListByUser_Handler,
		},
		{
			MethodName: "FetchStatus",
			Handler:    _TenderServiceFetch_FetchStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/proto/tender/proto_tender_service_fetch.proto",
}
