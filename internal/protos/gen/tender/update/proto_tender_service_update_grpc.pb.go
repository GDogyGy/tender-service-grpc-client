// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/protos/proto/tender/proto_tender_service_update.proto

package update

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TenderServiceUpdate_Edit_FullMethodName     = "/update.TenderServiceUpdate/Edit"
	TenderServiceUpdate_Rollback_FullMethodName = "/update.TenderServiceUpdate/Rollback"
	TenderServiceUpdate_Status_FullMethodName   = "/update.TenderServiceUpdate/Status"
)

// TenderServiceUpdateClient is the client API for TenderServiceUpdate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenderServiceUpdateClient interface {
	Edit(ctx context.Context, in *RequestEditV1, opts ...grpc.CallOption) (*TenderV1, error)
	Rollback(ctx context.Context, in *RequestRollbackV1, opts ...grpc.CallOption) (*TenderV1, error)
	Status(ctx context.Context, in *RequestStatusV1, opts ...grpc.CallOption) (*ResponseStatusV1, error)
}

type tenderServiceUpdateClient struct {
	cc grpc.ClientConnInterface
}

func NewTenderServiceUpdateClient(cc grpc.ClientConnInterface) TenderServiceUpdateClient {
	return &tenderServiceUpdateClient{cc}
}

func (c *tenderServiceUpdateClient) Edit(ctx context.Context, in *RequestEditV1, opts ...grpc.CallOption) (*TenderV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenderV1)
	err := c.cc.Invoke(ctx, TenderServiceUpdate_Edit_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenderServiceUpdateClient) Rollback(ctx context.Context, in *RequestRollbackV1, opts ...grpc.CallOption) (*TenderV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TenderV1)
	err := c.cc.Invoke(ctx, TenderServiceUpdate_Rollback_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenderServiceUpdateClient) Status(ctx context.Context, in *RequestStatusV1, opts ...grpc.CallOption) (*ResponseStatusV1, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ResponseStatusV1)
	err := c.cc.Invoke(ctx, TenderServiceUpdate_Status_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenderServiceUpdateServer is the server API for TenderServiceUpdate service.
// All implementations must embed UnimplementedTenderServiceUpdateServer
// for forward compatibility.
type TenderServiceUpdateServer interface {
	Edit(context.Context, *RequestEditV1) (*TenderV1, error)
	Rollback(context.Context, *RequestRollbackV1) (*TenderV1, error)
	Status(context.Context, *RequestStatusV1) (*ResponseStatusV1, error)
	mustEmbedUnimplementedTenderServiceUpdateServer()
}

// UnimplementedTenderServiceUpdateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTenderServiceUpdateServer struct{}

func (UnimplementedTenderServiceUpdateServer) Edit(context.Context, *RequestEditV1) (*TenderV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Edit not implemented")
}
func (UnimplementedTenderServiceUpdateServer) Rollback(context.Context, *RequestRollbackV1) (*TenderV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Rollback not implemented")
}
func (UnimplementedTenderServiceUpdateServer) Status(context.Context, *RequestStatusV1) (*ResponseStatusV1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedTenderServiceUpdateServer) mustEmbedUnimplementedTenderServiceUpdateServer() {}
func (UnimplementedTenderServiceUpdateServer) testEmbeddedByValue()                             {}

// UnsafeTenderServiceUpdateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenderServiceUpdateServer will
// result in compilation errors.
type UnsafeTenderServiceUpdateServer interface {
	mustEmbedUnimplementedTenderServiceUpdateServer()
}

func RegisterTenderServiceUpdateServer(s grpc.ServiceRegistrar, srv TenderServiceUpdateServer) {
	// If the following call pancis, it indicates UnimplementedTenderServiceUpdateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TenderServiceUpdate_ServiceDesc, srv)
}

func _TenderServiceUpdate_Edit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestEditV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceUpdateServer).Edit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenderServiceUpdate_Edit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceUpdateServer).Edit(ctx, req.(*RequestEditV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenderServiceUpdate_Rollback_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestRollbackV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceUpdateServer).Rollback(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenderServiceUpdate_Rollback_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceUpdateServer).Rollback(ctx, req.(*RequestRollbackV1))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenderServiceUpdate_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestStatusV1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceUpdateServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TenderServiceUpdate_Status_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceUpdateServer).Status(ctx, req.(*RequestStatusV1))
	}
	return interceptor(ctx, in, info, handler)
}

// TenderServiceUpdate_ServiceDesc is the grpc.ServiceDesc for TenderServiceUpdate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenderServiceUpdate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "update.TenderServiceUpdate",
	HandlerType: (*TenderServiceUpdateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Edit",
			Handler:    _TenderServiceUpdate_Edit_Handler,
		},
		{
			MethodName: "Rollback",
			Handler:    _TenderServiceUpdate_Rollback_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _TenderServiceUpdate_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/protos/proto/tender/proto_tender_service_update.proto",
}
